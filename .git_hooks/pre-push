#!/bin/sh

# Pre-push hook to enforce branch protection and naming conventions
# This hook prevents direct pushes to protected branches and validates branch naming

protected_branches="main develop master"
branch_pattern="^(feat|chore|bug|fix|doc|docs|style|refactor|perf|test|build|ci|revert|)-[a-z]+(-[a-z]+)*$"

# Get current branch name
current_branch=$(git rev-parse --abbrev-ref HEAD)

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

echo "${GREEN}üîç Validating branch protection rules...${NC}"

# Check if trying to push to a protected branch
for protected in $protected_branches; do
    if [ "$current_branch" = "$protected" ]; then
        echo "${RED}‚ùå ERROR: Direct push to '$protected' branch is not allowed!${NC}"
        echo "${YELLOW}üìã Please create a feature branch following this pattern:${NC}"
        echo "   $branch_pattern"
        echo ""
        echo "${YELLOW}üìù Example branch names:${NC}"
        echo "   ‚Ä¢ feat-user-authentication"
        echo "   ‚Ä¢ fix-api-response-validation"
        echo "   ‚Ä¢ chore-update-dependencies"
        echo "   ‚Ä¢ docs-git-workflow"
        echo ""
        echo "${YELLOW}üí° To create and switch to a new branch:${NC}"
        echo "   git checkout -b feat-your-feature-name"
        echo ""
        exit 1
    fi
done

# Validate branch naming convention (skip for protected branches during merges)
if ! echo "$current_branch" | grep -qE "$branch_pattern"; then
    # Allow temporary branches like PR merge branches
    if echo "$current_branch" | grep -qE "^(HEAD|refs/)"; then
        echo "${GREEN}‚úÖ Temporary branch detected, skipping naming validation${NC}"
    else
        echo "${RED}‚ùå ERROR: Branch name '$current_branch' does not follow the required pattern!${NC}"
        echo "${YELLOW}üìã Required pattern:${NC}"
        echo "   $branch_pattern"
        echo ""
        echo "${YELLOW}üìù Valid branch types:${NC}"
        echo "   ‚Ä¢ feat-    : New features or functionality"
        echo "   ‚Ä¢ chore-   : Maintenance tasks, dependency updates"
        echo "   ‚Ä¢ bug-     : Bug fixes and issue resolution"
        echo "   ‚Ä¢ fix-     : General fixes and corrections"
        echo "   ‚Ä¢ doc-/docs-: Documentation updates"
        echo "   ‚Ä¢ style-   : Code style, formatting changes"
        echo "   ‚Ä¢ refactor-: Code refactoring without functionality changes"
        echo "   ‚Ä¢ perf-    : Performance improvements"
        echo "   ‚Ä¢ test-    : Test additions or modifications"
        echo "   ‚Ä¢ build-   : Build system or deployment changes"
        echo "   ‚Ä¢ ci-      : Continuous integration configuration"
        echo "   ‚Ä¢ revert-  : Reverting previous changes"
        echo ""
        echo "${YELLOW}üí° To rename your current branch:${NC}"
        echo "   git branch -m new-branch-name"
        echo ""
        exit 1
    fi
fi

echo "${GREEN}‚úÖ Branch validation passed! Proceeding with push...${NC}"
exit 0
